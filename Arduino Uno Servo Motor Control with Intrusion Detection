This repository contains the code for controlling a servo motor connected to an Arduino Uno,
which turns up to 180 degrees upon detecting an intrusion using a connected sensor.
The system is designed to rotate the servo motor to a specific position in response to any detected movement or presence within the monitored area,
providing a basic yet efficient security mechanism.

Feel free to explore the code, modify it to suit your needs, and contribute to enhance the functionality!


#include <Servo.h>

Servo myservo;
int pos = 0; 

#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04

// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

void setup() {
  myservo.attach(9);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  pinMode(7,OUTPUT);
  Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
  Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
}
void loop() {
  // Clears the trigPin condition
  for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos); // tell servo to go to position in variable 'pos'
   distance=calculateDistance();
    Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
    delay(15);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
     
    distance= calculateDistance();
    Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
   delay(15);                       // waits 15ms for the servo to reach the position
  }
  if(distance<100)
  {
    digitalWrite(7, HIGH);
  }
  else
  {
    digitalWrite(7, LOW);
  }
  }
  int calculateDistance()
  {
    digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  return distance;
    
  }
